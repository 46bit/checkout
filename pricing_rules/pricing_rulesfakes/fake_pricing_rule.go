// Code generated by counterfeiter. DO NOT EDIT.
package pricing_rulesfakes

import (
	"sync"

	"github.com/46bit/checkout/pricing_rules"
)

type FakePricingRule struct {
	PriceStub        func(uint) uint
	priceMutex       sync.RWMutex
	priceArgsForCall []struct {
		arg1 uint
	}
	priceReturns struct {
		result1 uint
	}
	priceReturnsOnCall map[int]struct {
		result1 uint
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePricingRule) Price(arg1 uint) uint {
	fake.priceMutex.Lock()
	ret, specificReturn := fake.priceReturnsOnCall[len(fake.priceArgsForCall)]
	fake.priceArgsForCall = append(fake.priceArgsForCall, struct {
		arg1 uint
	}{arg1})
	fake.recordInvocation("Price", []interface{}{arg1})
	fake.priceMutex.Unlock()
	if fake.PriceStub != nil {
		return fake.PriceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.priceReturns
	return fakeReturns.result1
}

func (fake *FakePricingRule) PriceCallCount() int {
	fake.priceMutex.RLock()
	defer fake.priceMutex.RUnlock()
	return len(fake.priceArgsForCall)
}

func (fake *FakePricingRule) PriceCalls(stub func(uint) uint) {
	fake.priceMutex.Lock()
	defer fake.priceMutex.Unlock()
	fake.PriceStub = stub
}

func (fake *FakePricingRule) PriceArgsForCall(i int) uint {
	fake.priceMutex.RLock()
	defer fake.priceMutex.RUnlock()
	argsForCall := fake.priceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePricingRule) PriceReturns(result1 uint) {
	fake.priceMutex.Lock()
	defer fake.priceMutex.Unlock()
	fake.PriceStub = nil
	fake.priceReturns = struct {
		result1 uint
	}{result1}
}

func (fake *FakePricingRule) PriceReturnsOnCall(i int, result1 uint) {
	fake.priceMutex.Lock()
	defer fake.priceMutex.Unlock()
	fake.PriceStub = nil
	if fake.priceReturnsOnCall == nil {
		fake.priceReturnsOnCall = make(map[int]struct {
			result1 uint
		})
	}
	fake.priceReturnsOnCall[i] = struct {
		result1 uint
	}{result1}
}

func (fake *FakePricingRule) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.priceMutex.RLock()
	defer fake.priceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePricingRule) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pricing_rules.PricingRule = new(FakePricingRule)
